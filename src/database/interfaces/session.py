from typing import Any, Dict, List, Type, Generic, TypeVar, Optional, Protocol

T = TypeVar("T")


class ISession(Protocol, Generic[T]):
    def add(self, obj: T) -> None: ...

    def get(self, model: Type[T], id: Any) -> Optional[T]: ...

    def update(self, obj: T) -> None: ...

    def delete(self, obj: T) -> None: ...

    def commit(self) -> None: ...

    def rollback(self) -> None: ...

    def query(
        self,
        model: Type[T],
        order_by: Optional[List[Any]] = None,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        options: Optional[List[Any]] = None,
        in_: Optional[Dict[Any, List[Any]]] = None,
        **filters,
    ) -> List[T]: ...

    def execute(self, stmt: Any) -> None: ...

    def count(self, model: Type[T], **filters) -> int: ...

    def __enter__(self) -> "ISession": ...

    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
